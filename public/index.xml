<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>spaghettidev ü¶Ä</title>
    <link>https://spaghettidev.netlify.app/</link>
    <description>Recent content on spaghettidev ü¶Ä</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Mon, 07 Mar 2022 15:35:15 -0400</lastBuildDate><atom:link href="https://spaghettidev.netlify.app/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Creating a CLI with Rust</title>
      <link>https://spaghettidev.netlify.app/posts/2022/03/creating-a-cli-with-rust/</link>
      <pubDate>Mon, 07 Mar 2022 15:35:15 -0400</pubDate>
      
      <guid>https://spaghettidev.netlify.app/posts/2022/03/creating-a-cli-with-rust/</guid>
      <description>Setup Before getting into our hacker mood, let&amp;rsquo;s create a cargo project and install the packages we&amp;rsquo;ll need:
cargo new ferris-say Now, open your Cargo.toml, and add this below [dependencies]:
[dependencies] ansi_term = &amp;#34;0.12.1&amp;#34; clap = { version = &amp;#34;3.1.6&amp;#34;, features = [&amp;#34;derive&amp;#34;] } Or, if you have cargo edit (which I prefer using), write right in your terminal:
cargo add ansi_term cargo add clap --features derive After it&amp;rsquo;s installed, we&amp;rsquo;re ready to go to the next step.</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>https://spaghettidev.netlify.app/about/</link>
      <pubDate>Sat, 05 Mar 2022 16:15:14 -0400</pubDate>
      
      <guid>https://spaghettidev.netlify.app/about/</guid>
      <description>üê±‚Äçüíª A brief introduction about me. I&amp;rsquo;m a 17 years old software engineering student and math enthusiast from Venezuela. I&amp;rsquo;ve worked with Javascript &amp;amp; Typescript in both Deno and Node.js runtimes and I&amp;rsquo;m currently focused on Rust.
 I just want to prove Javascript is not stuck to the web browser anymore!
 Most of my projects are about creating CLI utilies to ship a brand new way to use a useful apps without taking off your hands from the keyword.</description>
    </item>
    
    <item>
      <title>My journey in Rust part I</title>
      <link>https://spaghettidev.netlify.app/posts/2022/03/my-journey-in-rust-part-i/</link>
      <pubDate>Sat, 05 Mar 2022 13:43:30 -0400</pubDate>
      
      <guid>https://spaghettidev.netlify.app/posts/2022/03/my-journey-in-rust-part-i/</guid>
      <description>Introduction If you have been in a cave for the last year, you might not notice there&amp;rsquo;s a language that&amp;rsquo;s been rising and gathering power, it&amp;rsquo;s name is Rust. If I had to describe it in one phrase, I&amp;rsquo;d totally agree with it&amp;rsquo;s brief but true description shown in the official page:
 A language empowering everyone to build reliable and efficient software.
 Why is it so popular lately? Rust was the most loved language for the last six years, by stackoverflow survey, but why ?</description>
    </item>
    
  </channel>
</rss>
